{"version":3,"sources":["Movie.js","App.js","reportWebVitals.js","index.js"],"names":["Movie","id","year","title","summary","poster","genres","className","src","alt","slice","map","genre","index","App","state","isLoadig","movies","getMovies","a","axios","get","data","setState","this","movie","medium_cover_image","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0TA+BeA,MA3Bf,YAA4D,EAA3CC,GAA4C,IAAxCC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,OAAQC,EAAS,EAATA,OAC/C,OAAO,sBAAKC,UAAU,QAAf,UACH,qBAAKC,IAAKH,EAAQI,IAAKN,EAAOA,MAAOA,IACrC,sBAAKI,UAAU,cAAf,UACA,sBAAKA,UAAU,gBAAf,UACI,oBAAIA,UAAU,eAAd,SAA8BJ,IAC9B,oBAAII,UAAU,cAAd,SAA6BL,OAEjC,oBAAGK,UAAU,iBAAb,UAA+BH,EAAQM,MAAM,EAAG,KAAhD,SACA,oBAAIH,UAAU,gBAAd,SAA+BD,EAAOK,KAAI,SAACC,EAAOC,GAAR,OAC1C,oBAAgBN,UAAU,gBAA1B,SACKK,GADIC,eCgCFC,G,kNAxCbC,MAAQ,CACNC,UAAU,EACVC,OAAQ,I,EAEVC,U,sBAAY,8BAAAC,EAAA,sEAKCC,IAAMC,IAAI,yEALX,gBAGNJ,EAHM,EACHK,KACLA,KACEL,OAGJ,EAAKM,SAAS,CAAEN,SAAQD,UAAU,IANxB,2C,kEASVQ,KAAKN,c,+BAEE,IAAD,EACuBM,KAAKT,MAA1BC,EADF,EACEA,SAAUC,EADZ,EACYA,OAClB,OAAQ,yBAASV,UAAU,YAAnB,SACLS,EACC,qBAAKT,UAAU,SAAf,SACA,sBAAMA,UAAU,eAAhB,0BAGA,qBAAKA,UAAU,SAAf,SACGU,EAAON,KAAI,SAAAc,GAAK,OACrB,cAAC,EAAD,CACcxB,GAAIwB,EAAMxB,GACVC,KAAMuB,EAAMvB,KACZC,MAAOsB,EAAMtB,MACbC,QAASqB,EAAMrB,QACfC,OAAQoB,EAAMC,mBACdpB,OAAQmB,EAAMnB,QANhBmB,EAAMxB,e,GA1BN0B,IAAMC,YCOTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.73ee08a0.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Movie.css\"\n\nfunction Movie({ id, year, title, summary, poster, genres }){\n    return <div className=\"movie\">\n        <img src={poster} alt={title} title={title}/>\n        <div className=\"movie__data\">\n        <div className=\"movie__header\">\n            <h3 className=\"movie__title\">{title}</h3>\n            <h5 className=\"movie__year\">{year}</h5>\n        </div>\n        <p className=\"movie__summary\">{summary.slice(0, 140)}...</p>\n        <ul className=\"movie__genres\">{genres.map((genre, index) => \n        <li key={index} className=\"genres__genre\">\n            {genre}\n        </li>)}\n        </ul>\n        </div>\n    </div>\n}\n\nMovie.propTypes = {\n    id: PropTypes.number.isRequired,\n    year: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    summary: PropTypes.string.isRequired,\n    poster: PropTypes.string.isRequired,\n    genres: PropTypes.arrayOf(PropTypes.string).isRequired\n};\n\nexport default Movie;","import React from \"react\";\nimport axios from \"axios\";\nimport Movie from \"./Movie\";\nimport \"./App.css\";\n\nclass App extends React.Component{\n  state = {\n    isLoadig: true,\n    movies: []\n  };\n  getMovies = async () => {\n    const {data: {\n      data: {\n        movies\n      }\n    }} = await axios.get(\"https://yts-proxy.nomadcoders1.now.sh/list_movies.json?sort_by=rating\");\n    this.setState({ movies, isLoadig: false });\n  }\n  componentDidMount(){\n    this.getMovies();\n  }\n  render(){\n    const { isLoadig, movies } = this.state;\n    return( <section className=\"container\">\n      {isLoadig \n      ? <div className=\"loader\">\n        <span className=\"loader__text\">Loading...</span>\n      </div> \n      : (\n        <div className=\"movies\">\n          {movies.map(movie => (\n      <Movie key={movie.id}\n                    id={movie.id}\n                    year={movie.year} \n                    title={movie.title} \n                    summary={movie.summary} \n                    poster={movie.medium_cover_image}\n                    genres={movie.genres} />\n          ))}\n        </div>\n      )}\n    </section>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}